# Process overview and scheduling

## Idea

::: {.callout-tip}
### TL;DR – Processes:

*   **What happens?** Provide a concise, step-by-step list of all "actions" that occur during each time step of the simulation.
*   **Who does it?** For each action, specify which entity (or entities, e.g., all agents, the environment) executes it.
*   **What changes?** State which state variables (from Element 2) are updated by each action.
*   **In what order?** Clearly define the precise order in which actions are executed, and if multiple entities perform an action, specify their internal execution order (e.g., random, by highest value, arbitrary).
*   **Why that order?** Provide the rationale for this scheduling, as it can significantly impact model results.

:::

This element is where you describe the *dynamics* of your model – **what happens and in what order**. It provides a high-level summary of the model's execution over a single time step, detailing the sequence of actions, which entities perform them, and what state variables are updated as a result. While the intricate details of *how* each process works are reserved for Element 7 (Submodels), this section gives the reader a crucial roadmap of the model's operational flow, including its internal clock and decision-making priorities. It's the "recipe" for your model's operations.

## Guidance

Effectively describing your model's processes and scheduling is paramount for its reproducibility and comprehensibility. Keep the following in mind:

*   **Be complete but concise:** Your schedule should include *everything* that is executed each time step. However, it should remain an *overview*. For complex processes, simply state which "submodel" (fully detailed in Element 7) is executed, without going into its internal logic here. Very simple processes can be fully described in this section.
*   **Prioritize clarity of execution order:** For actions performed by multiple entities (e.g., all agents), clearly state the order of execution (e.g., arbitrary, random, sorted by a state variable). Scheduling decisions can have strong effects on model results and require careful justification.
*   **Explicitly state state variable updates:** The core purpose of model processes is to change state variables. For each action, identify *which* state variables are updated.
*   **Provide rationale for processes and scheduling:** Explain *why* you chose to include specific processes and exclude others. Crucially, justify *why* actions are scheduled in a particular order, especially when it's not self-evident. This transparency makes your model design less arbitrary.
*   **Separate continuous time events (if applicable):** If your model includes actions scheduled as discrete events in continuous time (rather than discrete time steps), summarize how these events are scheduled (what triggers them, how their timing is determined). Full details are still reserved for Element 7.
*   **Use pseudo-code or diagrams (judiciously):** While a simple numbered list of actions is often sufficient, more complex logic or scheduling might benefit from pseudo-code or flowcharts. However, these should *supplement*, not replace, the clear textual description, as diagrams alone are rarely sufficient for full reproducibility. Avoid actual programming code.
*   **Do not include time step length or temporal extent:** These aspects belong in Element 2 (Entities, State Variables, and Scales), as they define the overall model world, not the internal operations per step.

## Checklist

The ODD text for this element should describe:

*   A complete but concise model schedule that defines exactly what happens each time step.
    *   This schedule should be presented as a hierarchy of "actions" that each describe:
        *   Which entity or entities execute which process or submodel.
        *   Which state variables are updated.
        *   (For actions executed by multiple entities) The order in which the entities execute it.
*   A separate discussion, if needed, that summarizes how actions executed in continuous time (instead of discrete time steps) are scheduled.
*   A discussion providing the rationale for why the model includes the processes it does.
*   A discussion providing the rationale for how the actions are scheduled (e.g., why actions are in a given order, why a specific execution order was chosen for multiple entities).

## Examples

Here are examples illustrating how model processes and their scheduling are described. These examples demonstrate how to provide a clear, step-by-step overview of the model's dynamics, linking processes to entities and state variables, and explaining the rationale behind the chosen order of operations.

### Examples Process Overview and Scheduling

*   **[Ayllón D, Railsback SF, Vincenzi S, Groeneveld J, Almodóvar A, Grimm V. 2016. InSTREAM-Gen: Modelling eco-evolutionary dynamics of trout populations...]**
    *   *This example provides a comprehensive list of processes covering the entire life-cycle of the simulated trout, detailing which entities (environment, trout, redds) perform which actions and the state variables affected. Crucially, it includes the rationale for the specific ordering of actions, explaining how it reflects biological priorities (e.g., environmental updates before fish actions, spawning before other fish behaviors).*
    
*   **[Evers E, de Vries H, Spruijt BM, Sterck EH. 2014. The EMO-model: an agent-based model of primate social behavior regulated by two emotional dimensions...]**
    *   *This example highlights how to describe a model where processes are not strictly time-step based but are scheduled as discrete events in continuous time. It explains the event-driven nature, where the agent with the lowest scheduled time is activated next, and how activations lead to subsequent rescheduling based on behavioral outcomes.*
    
## Test Yourself

Can you identify what is incorrect or could be significantly improved in the following description of a model's process overview and scheduling?

> Each day, the agents decide where to go, then they move. Next, the environment updates based on their movement. We also collect data at the end of the simulation. This process is repeated until the simulation ends. We didn't specify the order for agent movement because it doesn't really matter for our results.

::: {.callout-caution collapse="true"}
### Expand To See the Solution

Here’s a breakdown of what’s incorrect or could be significantly improved in the example description:  

1.  **Vague Process Names/Submodels:** "Decide where to go," "they move," and "environment updates" are too generic. While full detail is in Element 7, the overview should use more descriptive "submodel" names (e.g., "Agent_Decision_Submodel," "Agent_Movement_Submodel," "Environment_Update_Submodel").
2.  **Missing State Variable Updates:** The description states *what* happens but fails to explicitly mention *which state variables* are updated by each action. For example:
    *   "Agents decide where to go" should lead to an update of the agent's `daily_destination` state variable.
    *   "They move" updates the agent's `current_location` state variable.
    *   "Environment updates based on their movement" might update the `traffic_flow` state variable of `Roads` or `occupancy_status` of `Buildings`. This is a critical omission for reproducibility.
3.  **Incorrect Placement of Data Collection/Output:** "We also collect data at the end of the simulation." Data collection and output (what ODD calls "Observation" under Design Concepts) typically occur *within* each time step, after all relevant processes have run, to capture the system's state. Describing it as only happening "at the end of the simulation" implies it's not part of the *daily* schedule, which is often inaccurate for ABMs. Even if output is only saved at the very end, how the *data points themselves* are generated or "observed" from the model state usually happens within the simulation loop.
4.  **Insufficient Rationale for Execution Order:** The statement "We didn't specify the order for agent movement because it doesn't really matter for our results" is a common trap. While it *might* be true that the order doesn't matter, it needs to be explicitly stated and justified (e.g., "Agents update their location in arbitrary order, as their movement decisions are independent and do not affect the choices of other agents within the same time step"). This justification prevents assumptions and aids reproducibility. If the order *could* matter but the model implicitly assumes it doesn't (e.g., synchronous updating where interactions are resolved after all agents have acted), that still needs to be clearly stated.
5.  **Missing Handling of Multi-Entity Action Order:** "The agents decide where to go, then they move." For actions performed by *all* agents, the internal order (e.g., random, sorted by age, arbitrary) *must* be specified, even if the modeler *believes* it doesn't matter. This is a crucial detail for reproducibility.
6.  **Vague Loop Condition:** "This process is repeated until the simulation ends" is implied by Element 2's scales, but the schedule itself should be precise. For instance, "These actions are repeated for 100 time steps."

A significantly improved (but still hypothetical) version might be:  

> Each time step (representing one hour, as defined in Element 2), the following actions are executed in this precise order:
1.  **Environment_Update_Submodel:** The environment updates its `traffic_flow` state variables for all `Road` entities based on the previous hour's agent movements. This update occurs first to provide current traffic conditions for agent decisions.
2.  **Agent_Decision_Submodel:** All **People** agents simultaneously (arbitrary order) execute their decision submodel, updating their `daily_destination` state variable for the current time step. The order is arbitrary as agents make decisions based on perceived, not actual, real-time traffic updates.
3.  **Agent_Movement_Submodel:** All **People** agents execute their movement submodel, updating their `current_location` state variable. The order in which agents attempt to move is randomized each time step to avoid artifacts from fixed processing order when multiple agents might compete for the same grid cell or road segment.
4.  **Observation_Submodel:** The model's observer collects aggregated data on `current_location` for all `People` and `traffic_flow` for all `Roads`, writing these to an output file. This ensures a consistent snapshot of the system state at the end of each time step.
These actions are repeated for the total simulation duration of 100 days (2400 time steps), as defined in Element 2.

:::